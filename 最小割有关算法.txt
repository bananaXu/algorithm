分数规划：
λ = min{f(x)} = a(x)/b(x)(x∈S, b(x) > 0)
a(x),b(x)都是连续的实值函数
令g(λ) = min{a(x)-λb(x)};
λ1 < λ2时
g(λ1) = min{a(x)-λ1*b(x)} = a(x1)-λ1*b(x1) > a(x1)-λ2*b(x1) >= min{a(x)-λ2*b(x)} = g(λ2)
所以g(λ)严格单调递减

设原规划最优解为λ1 = min{f(x1)} = a(x1)/b(x1)
λ1 <= a(x2)/b(x2)
a(x2)-λ1*b(x2) >= 0当x2 = x1时能获得最小值0
所以g(λ1) = 0
所以原规划最优时g(λ) = 0;

设存在一个解λ2使得f(x2)比g(λ1) = 0的f(x1)时还小
λ2 = a(x2)/b(x2) < λ1
a(x2)-λ1*b(x2) < 0
此时g(λ1) < 0,与g(λ1) = 0矛盾
所以g(λ) = 0时原规划有最优解

而由于g(λ)单调递减，所以可以二分求解


最优标号：
给出一个无向图G = (V, E), 每个点v以一个有界非负整数作为标号Lv，
每条边的权We = Lu XOR Lv(异或)，现在已知其中部分标号，求使得总边权和最小
的标号方式。
∑We = ∑(Lu^Lv) = ∑(2^i)*(Lu,i XOR Lv,i) = ∑(2^i)*∑(Lu,i XOR Lv,i)
由于二进制每一位独立，那么问题就可以转换为求第i位使得边权和最小
那么子问题∑We = ∑(Lu,i XOR Lv,i)中Lu,i∈{0, 1}，此时边权w∈{0, 1}
那么问题可以看成将端点为0和1的边切开分成两个集合的最小切法，那不就是最小割吗。。
1、将s与所有已知0点连接，容量为无穷大，不让其被切开，所有已知1点与t连接，容量无穷大
2、将所有无向边转换成两条容量为1的有向边，切的就是这个
3、最小割算法求解
4、将每一位整合


最大权闭合图：
定义一个有向闭合图G = (V, E)是该有向图的一个点集，且该点集的所有点的后继点还是在该点集中。
给每一个V分配一个点权，点权和最大的闭合图就是最大权闭合图。
方法：
将边容量全部给无穷大，将s点连接所有正权边，容量为点权，所有负权值点连接t，容量为-点权，求最小割；
证明：
简单割定义：所有割边都只与s，t相关
此处最小割是简单割：除s，t以外其他边都是无穷大，显而易见是简单割。
闭合图对应简单割：所有点都与s，t相连，当然是简单割。
简单割对应闭合图：割掉的边只与s，t相连，其他所有边都还在，当然是闭合图。
将图分割成两部分，一部分是选择的点，一部分是抛弃的点
没被割断的就是选择的正权点，而被割断的就是被选择的负权点，得到的权值为(s总值-s割值)-t割值 = s总值-总割值
问题就转换成求最小割了



最大密度子图：	
一个无向图的密度 = 边数/点数，子图中密度最大的就叫最大密度子图
令D = max{f(x) = Xe/Xv}
h(g) = max{Xe-gXv};
根据分数划分进行二分查找，上下界分别为m/1, 1/n
两两密度差大于1/n^2
m1/n1-m2/n2 = (m1*n2-m2*n1)/(n1*n2) >= 1/(n1*n2) >= 1/n^2
初步算法：
由于边连接的所有点都在子图中，那么问题就可以转换为最大权闭合图，以边为点，点权为1，连接其端点点权为-g
复杂度为logn*MaxFlow(n+m, n+m)
改进算法：
割断一些边，剩下的点与边组成一个子图
剩下的点连接的所有边-割掉的边就是剩下的边
要求Xe-gXv最大，也就是求gXv-Xe最小
Xe = 剩下的点连接的所有边-割掉的边 = (剩下每个点连接的边数的和-割数)/2
2Xe = 剩下每个点连接的边数的和-割数
2gXv-2Xe = 2gXv-剩下每个点连接的边数的和+割数
令v点连接的边数为dv
割掉每个点的代价需要加上2g-dv，于是添加一个s点，与每个点相连，权值为2g-dv，添加一个t点与所有点相连，权值为0
s为留下来的一部分，取走一个点，必须割断其与s相连的边，反过来割断这条边，若这个点还在集合中，就没必要割断，t也一样
而两点分别在两个集合，若两点有边，也必须割断
保证了边与点一一对应，而一个割也显然和一个子图一一对应
那么问题转换成了求最小割，将原每条无向边转换成容量为1的两条有向边
由于最小割不能有负数，将与s和t相连的边权值都加上u，这里u=m可以保证非负
证明：
割C[s,t] = 与s相连的割+原图边的割+与t相连的割 (与s相连的割+与t相连的割 = n, 因为s与t之间就隔一个点)
		 = ∑(m+2g-dv)(v为n-(与t相连的割))+原图边之间的割数+m*(与t相连的割)
		 = m*n+2gXe-dv+原图边之间的割数
		 = m*n+2gXv-2Xe
需要2gXv-2Xe最小，也就是求最小割。
推广1：
如果边带权。
可求出除了二分查找精度不一样，其他都类似。
推广2：
点边都带权。
依然类似，但是u得找个足够大的






































